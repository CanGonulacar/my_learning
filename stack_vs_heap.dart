/*
Ã–nce basit bir ÅŸekilde aÃ§Ä±klamaya Ã§alÄ±ÅŸayÄ±m

Stack ve Heap'i bir kÃ¼tÃ¼phaneye benzetelim:

**STACK:**
- MasamÄ±z gibi dÃ¼ÅŸÃ¼nelim
- SÄ±nÄ±rlÄ± alan var
- KitaplarÄ± Ã¼st Ã¼ste koyuyoruz
- En Ã¼stteki kitaba hemen ulaÅŸabiliriz
- Masadan kalktÄ±ÄŸÄ±mÄ±zda kitaplar kaldÄ±rÄ±lÄ±yor.

Ã–rnek:
```dart
void main() {
  int yas = 25;        /// Masaya yaÅŸ yazdÄ±k
  bool evliMi = false; /// Masaya medeni hal yazdÄ±k
  
  /// Bu deÄŸiÅŸkenler fonksiyon bitince 
  /// masadan silinir (stack'ten temizlenir)
}
```

**HEAP:**
- KÃ¼tÃ¼phanenin depo alanÄ± gibi dÃ¼ÅŸÃ¼nelim
- Ã‡ok geniÅŸ alan var
- Kitaplar rastgele yerleÅŸtirilebilir
- Bir kitaba ulaÅŸmak iÃ§in raf numarasÄ± (referans) kullanÄ±rÄ±z
- KullanÄ±lmayan kitaplarÄ± gÃ¶revli (garbage collector) toplar

Ã–rnek:
```dart
void main() {
  /// Heap Ã¶rneÄŸi: 
  String isim = "Ahmet";  /// "Ahmet" depoda
  List liste = [1,2,3];   /// Liste depoda
  
  /// Stack'te sadece depo numaralarÄ± var
  /// Yani isim ve liste deÄŸiÅŸkenleri
  /// heap'teki verilerin referanslarÄ±nÄ± tutuyor
}
```

**Ne Zaman Ne KullanÄ±lÄ±r:**

Stack'te tutulanlar (Masa):
- SayÄ±lar (int, double)
- Boolean deÄŸerler
- Referanslar (depo numaralarÄ±)

Heap'te tutulanlar (Depo):
- String'ler 
- Listeler
- Objeler
- SÄ±nÄ±flar

Basit bir senaryo:
```dart
void kutuphaneOrnegi() {
  int ogrenciNo = 123;       /// Stack'te (masada)
  
  String kitapAdi = "Flutter Dersleri";  /// Heap'te (depoda)
  List<String> yazarlar = ["Can", "Hakan"]; /// Heap'te (depoda)
  
  /// ogrenciNo -> direkt masada
  /// kitapAdi -> masada sadece depo numarasÄ± yani referansÄ±
  /// yazarlar -> masada sadece depo numarasÄ± yani referansÄ±
}
```

Ã–zetle:
1. KÃ¼Ã§Ã¼k, basit ÅŸeyler -> Stack (Masa)
2. BÃ¼yÃ¼k, karmaÅŸÄ±k ÅŸeyler -> Heap (Depo)
3. Stack daha hÄ±zlÄ± ama kÃ¼Ã§Ã¼k
4. Heap daha yavaÅŸ ama bÃ¼yÃ¼k
5. Stack otomatik temizlenir
6. Heap'i garbage collector temizler olabildiÄŸince

Bu kadar basit! ğŸ˜Š

 */

/*
STACK:

LIFO (Last In First Out) prensibiyle Ã§alÄ±ÅŸan, Ã¶nceden belirlenmiÅŸ boyutta olan bellek bÃ¶lgesidir
Ã‡ok hÄ±zlÄ± eriÅŸim saÄŸlar Ã§Ã¼nkÃ¼ bellek dÃ¼zenli ve sÄ±ralÄ±dÄ±r
Derleme zamanÄ±nda boyutu belirlenir. (Compile Time)
Otomatik bellek yÃ¶netimi vardÄ±r (scope bitince otomatik temizlenir)
Thread baÅŸÄ±na bir stack ayrÄ±lÄ±r

HEAP:

Dinamik bellek alanÄ±dÄ±r, boyutu runtime'da deÄŸiÅŸebilir
DaÄŸÄ±nÄ±k bellek yapÄ±sÄ± vardÄ±r
Manuel bellek yÃ¶netimi gerektirir (Dart'ta Garbage Collector yapar)
TÃ¼m thread'ler ortak kullanÄ±r
Stack'e gÃ¶re daha yavaÅŸ eriÅŸim saÄŸlar

Stack ve Heap'i daha detaylÄ± inceleyelim:

# STACK

1. Ã‡alÄ±ÅŸma Prensibi:
```dart
void stackExample() {
  /// Her fonksiyon Ã§aÄŸrÄ±sÄ± iÃ§in yeni bir stack frame oluÅŸur
  int a = 5;          /// Stack offset: 0
  int b = 10;         /// Stack offset: 4
  double c = 15.5;    /// Stack offset: 8
  
  calculateSum(a, b); /// Yeni stack frame oluÅŸur
}

int calculateSum(int x, int y) {
  int result = x + y; /// Yeni stack frame'de
  return result;      /// Stack frame temizlenir
}
```

2. Stack Frame YapÄ±sÄ±:
- Return Address (Fonksiyon bitince dÃ¶nÃ¼lecek adres)
- Parametre deÄŸerleri
- Local deÄŸiÅŸkenler
- Stack pointer (SP) - Stack'in tepesini gÃ¶sterir
- Frame pointer (FP) - Mevcut frame'in baÅŸlangÄ±cÄ±nÄ± gÃ¶sterir

3. Stack Overflow Durumu:
```dart
void recursiveFunction() {
  int x = 1;
  recursiveFunction(); /// SÃ¼rekli kendini Ã§aÄŸÄ±rÄ±r
  /// Stack dolunca StackOverflow hatasÄ± oluÅŸur
}
```

# HEAP

1. Bellek YÃ¶netimi DetaylarÄ±:

```dart
class Person {
  String name;
  List<String> hobbies;
  
  Person(this.name) {
    /// 1. name string'i heap'te oluÅŸturulur
    /// 2. Person objesi heap'te oluÅŸturulur
    /// 3. Stack'te sadece Person referansÄ± tutulur
    hobbies = [];     /// Yeni List heap'te oluÅŸturulur
  }
  
  void addHobby(String hobby) {
    hobbies.add(hobby); /// Heap'teki List'e yeni eleman eklenir
  }
}

void heapExample() {
  var person1 = Person("Alice");  /// Heap allocation
  var person2 = person1;          /// Sadece referans kopyalanÄ±r
  
  person1.addHobby("Reading");    /// Heap'teki aynÄ± List gÃ¼ncellenir
  /// person2.hobbies de aynÄ± List'i gÃ¶sterir
}
```

2. Heap Fragmentation:
```dart
void fragmentationExample() {
  List<String> list1 = List.filled(1000, "A"); /// BÃ¼yÃ¼k blok
  List<String> list2 = List.filled(2000, "B"); /// BÃ¼yÃ¼k blok
  List<String> list3 = List.filled(500, "C");  /// Orta blok
  
  list1 = null; /// BoÅŸluk oluÅŸur
  
  /// Yeni bir 1500 boyutlu liste iÃ§in
  /// yeterli ardÄ±ÅŸÄ±k alan olmayabilir
  /// Bu fragmentasyon problemidir
}
```

3. Garbage Collection DetaylarÄ±:

```dart
class Resource {
  final String data;
  Resource(this.data);
  
  /// Finalizer metodu (nadiren kullanÄ±lÄ±r)
  void dispose() {
    /// KaynaklarÄ± temizle
    print('Resource disposed');
  }
}

void gcExample() {
  weak Resource? resource; /// Weak referans
  
  void createResource() {
    resource = Resource("data");
    /// Scope bitince resource GC iÃ§in uygun hale gelir
  }
  
  void complexOperation() {
    var list1 = List.filled(10000, "data");
    var list2 = List.filled(20000, "data");
    /// BÃ¼yÃ¼k allocationlar GC'yi tetikleyebilir
  }
}
```

4. Memory Layout DetaylarÄ±:

```dart
class MemoryExample {
  /// Static deÄŸiÅŸkenler data segment'te
  static const int CONSTANT = 100;
  
  /// Instance deÄŸiÅŸkenler heap'te
  int instanceVar;
  
  void memoryLayoutExample() {
    /// Stack'te:
    int stackVar = 42;
    final int finalStackVar = 10;
    
    /// Heap'te:
    var dynamicArray = List<int>.filled(1000, 0);
    var growableList = <String>[];
    
    /// String interning Ã¶rneÄŸi:
    var str1 = "hello";
    var str2 = "hello";
    /// AynÄ± string literals heap'te tek bir yerde tutulur
    
    /// Value types vs Reference types
    var value1 = 42;        /// Stack'te
    var value2 = value1;    /// DeÄŸer kopyalanÄ±r
    
    var list1 = [1,2,3];    /// Heap'te
    var list2 = list1;      /// Referans kopyalanÄ±r
  }
}
```

5. Performans Ä°puÃ§larÄ±:

```dart
void performanceConsiderations() {
  /// Ä°yi: Stack allocation
  int x = 42;
  double y = 3.14;
  
  /// Dikkatli kullanÄ±lmalÄ±: Heap allocation
  var largeList = List<int>.filled(1000000, 0);
  
  /// Ä°yi: Small String
  var smallString = "Hello";
  
  /// Dikkatli kullanÄ±lmalÄ±: Large String
  var largeString = "X" * 1000000;
  
  /// Ä°yi: Records (Stack-based)
  var point = (x: 10, y: 20);
  
  /// Dikkatli kullanÄ±lmalÄ±: Class (Heap-based)
  var pointClass = Point(10, 20);
}
```

6. Memory Leak Ã–nleme:

```dart
class StreamExample {
  StreamController? _controller;
  StreamSubscription? _subscription;
  
  void startListening() {
    _controller = StreamController<int>();
    
    _subscription = _controller?.stream.listen((data) {
      print(data);
    });
  }
  
  void dispose() {
    /// Memory leak Ã¶nleme
    _subscription?.cancel();
    _controller?.close();
    _controller = null;
    _subscription = null;
  }
}
```

7. Heap ve Stack Ä°liÅŸkisi:

```dart
class ComplexDataStructure {
  final List<Map<String, List<int>>> data;
  
  ComplexDataStructure() : data = [] {
    /// Heap'te nested yapÄ±:
    /// 1. OuterList
    /// 2. ---> Map
    /// 3. ------> InnerList
    /// 4. ----------> Integer values
    
    /// Stack'te sadece ComplexDataStructure referansÄ±
  }
  
  void addData(String key, List<int> values) {
    data.add({key: values});
    /// Yeni Map ve List heap'te oluÅŸturulur
  }
}
```

 */